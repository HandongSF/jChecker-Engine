/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.7/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'application'
}

repositories {
    // Use JCenter for resolving dependencies.
    // since JCenter has ended its servicing, I have changed it into use of mavenCentral
    mavenCentral()
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

// configurations.all block has deleted

dependencies {
    // Use JUnit test framework.
    testImplementation 'junit:junit:4.13'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // https://mvnrepository.com/artifact/com.google.guava/guava
    implementation 'com.google.guava:guava:33.0.0-jre'

    // https://mvnrepository.com/artifact/org.eclipse.jdt/org.eclipse.jdt.core
    implementation 'org.eclipse.jdt:org.eclipse.jdt.core:3.38.0'

    // https://mvnrepository.com/artifact/com.google.code.gson/gson
    implementation 'com.google.code.gson:gson:2.10.1'

    // https://mvnrepository.com/artifact/commons-cli/commons-cli
    implementation 'commons-cli:commons-cli:1.5.0'

    // https://mvnrepository.com/artifact/commons-io/commons-io
    implementation 'commons-io:commons-io:2.18.0'


    // https://mvnrepository.com/artifact/com.github.javaparser/javaparser-symbol-solver-core
    implementation 'com.github.javaparser:javaparser-symbol-solver-core:3.25.4'
}


task fatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'edu.isel.csee.javagrader.grader.Main'
    }
    archiveBaseName.set(project.name)
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from {

        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }


        sourceSets.main.output
    }

    exclude 'META-INF/MANIFEST.MF', 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA'
}


application {
    // Define the main class for the application.
    mainClass = 'edu.isel.csee.jchecker2_0.GradeMain'
}


tasks.withType(JavaCompile) {
    options.compilerArgs = ['-Xlint:all']
}

